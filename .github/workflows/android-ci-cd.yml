name: Android CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create keys.properties
        run: |
          echo "PROD_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" > keys.properties
          echo "DEV_BACKEND_URL=${{ secrets.DEV_BACKEND_URL }}" >> keys.properties
          echo "STAGING_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> keys.properties
          echo "RELEASE_STORE_FILE=keystore.jks" >> keys.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keys.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> keys.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keys.properties

      - name: Create keystore file
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Verify dependencies
        run: ./gradlew dependencies

  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create keys.properties
        run: |
          echo "PROD_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" > keys.properties
          echo "DEV_BACKEND_URL=${{ secrets.DEV_BACKEND_URL }}" >> keys.properties
          echo "STAGING_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> keys.properties
          echo "RELEASE_STORE_FILE=keystore.jks" >> keys.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keys.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> keys.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keys.properties

      - name: Create keystore file
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Lint check
        run: ./gradlew lintDebug

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports
          path: '**/build/reports/lint-results-*.html'

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create keys.properties
        run: |
          echo "PROD_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" > keys.properties
          echo "DEV_BACKEND_URL=${{ secrets.DEV_BACKEND_URL }}" >> keys.properties
          echo "STAGING_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> keys.properties
          echo "RELEASE_STORE_FILE=keystore.jks" >> keys.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keys.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> keys.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keys.properties

      - name: Create keystore file
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports
          path: '**/build/reports/tests/'

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create keys.properties
        run: |
          echo "PROD_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" > keys.properties
          echo "DEV_BACKEND_URL=${{ secrets.DEV_BACKEND_URL }}" >> keys.properties
          echo "STAGING_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> keys.properties
          echo "RELEASE_STORE_FILE=keystore.jks" >> keys.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keys.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> keys.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keys.properties

      - name: Create keystore file
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Build staging APK
        run: ./gradlew assembleStagingDebug

      - name: Upload staging APK
        uses: actions/upload-artifact@v4
        with:
          name: app-staging-debug
          path: app/build/outputs/apk/staging/debug/app-staging-debug.apk

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: Create keys.properties
        run: |
          echo "PROD_BACKEND_URL=${{ secrets.PROD_BACKEND_URL }}" > keys.properties
          echo "DEV_BACKEND_URL=${{ secrets.DEV_BACKEND_URL }}" >> keys.properties
          echo "STAGING_BACKEND_URL=${{ secrets.STAGING_BACKEND_URL }}" >> keys.properties
          echo "RELEASE_STORE_FILE=keystore.jks" >> keys.properties
          echo "RELEASE_STORE_PASSWORD=${{ secrets.RELEASE_STORE_PASSWORD }}" >> keys.properties
          echo "RELEASE_KEY_ALIAS=${{ secrets.RELEASE_KEY_ALIAS }}" >> keys.properties
          echo "RELEASE_KEY_PASSWORD=${{ secrets.RELEASE_KEY_PASSWORD }}" >> keys.properties

      - name: Create keystore file
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks

      - name: Run ktlint
        run: ./gradlew ktlintCheck

      - name: Upload ktlint reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ktlint-reports
          path: '**/build/reports/ktlint/'

  verify-branch-status:
    name: Verify Branch Status
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branch merge conflicts
        run: |
          git fetch origin main
          git checkout $GITHUB_HEAD_REF
          git merge-base --is-ancestor origin/main HEAD || (echo "Branch is not up to date with main" && exit 1)
          git merge-tree $(git merge-base origin/main HEAD) origin/main HEAD | grep -i "<<<<<<< " && 
          echo "Merge conflict detected" && exit 1 || echo "No merge conflicts detected"

  approve-pr:
    name: Approve PR for Merge
    runs-on: ubuntu-latest
    needs: [verify-branch-status]
    if: github.event_name == 'pull_request'
    steps:
      - name: Approve PR
        run: echo "All checks passed! PR is ready to be merged to main branch."